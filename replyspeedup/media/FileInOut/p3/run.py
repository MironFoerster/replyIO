# ---- Template start ----# Input and Output listsimport itertoolsin_lines: list = in_lines if "in_lines" in globals() else default n_cases = int(in_lines.pop())# ---- Template end ---- def average(l):    return sum(l)/len(l)"""manhattan distance calculation"""def distance(coords1, coords2):    return abs(coords1[0]-coords2[0])+abs(coords1[1]-coords2[1])    def distances(coord, coord_list):    return list(map(lambda x: distance(coord, x), coord_list))def optimize(active_flower_pots: list, possible_flower_pots):    changed = False    for flower_pot in active_flower_pots:        every_distance_to_active_flower_pot_else = distances(flower_pot, active_flower_pots.copy())        every_distance_to_active_flower_pot_else.remove(0)        target = [min(every_distance_to_active_flower_pot_else), flower_pot]        active_flower_pots.remove(target[1])        new_position = target        for possible_flower_pot in possible_flower_pots:            if possible_flower_pot in active_flower_pots:                continue                        every_distance_to_active_flower_pot_else = distances(possible_flower_pot, active_flower_pots.copy())            if min(every_distance_to_active_flower_pot_else) > new_position[0]:                new_position = [min(every_distance_to_active_flower_pot_else), possible_flower_pot]                active_flower_pots.append(new_position[1])        if new_position != target:        return optimize(active_flower_pots, possible_flower_pots)    return active_flower_potsdef calc(coord, active_flower_pots):    _distances = distances(coord, active_flower_pots)    _distances.remove(0)    return min(_distances)         """Documentation"""def solve_case():    width, height, flowers, grounds = map(int, in_lines.pop().split(" "))    flower_pots = []    for ground in range(grounds):        x, y = map(int, in_lines.pop().split(" "))        flower_pots.append((x,y))    flower_pots_distance_average = map(lambda x: average(distances(x, flower_pots)), flower_pots)    zipped_flower_pots = list(zip(flower_pots_distance_average, flower_pots))    zipped_flower_pots.sort(reverse=True)    active_flower_pots = optimize(list(map(lambda x: x[1], zipped_flower_pots[0:flowers])), flower_pots)    return min(list(map(lambda coord: calc(coord, active_flower_pots), active_flower_pots)))# ---- Template start ----for n_case in range(n_cases):    out_lines.append(f'Case #{n_case+1}: {solve_case()}\n')# ---- Template end ----# ---- END FILE - DON'T DELETE ---